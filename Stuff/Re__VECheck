From GatewayBBS@gmx.net Sun, 13 Feb 2000 04:09:11 +0200
From: "Michaela Prüß" <GatewayBBS@gmx.net>
To: "Jan Erik Olausen" <virusexecutor@c2i.net>
Subject: Re: VECheck
Date: 13 Feb 2000 02:09:11 GMT
Content-type: multipart/mixed; boundary="1038p4TteRSuKXBIgGr8gRiNDIkkZAlLD3I"

MIME multipart

--1038p4TteRSuKXBIgGr8gRiNDIkkZAlLD3I

Hello Jan <virusexecutor@c2i.net>,

> Hi :)
> 
>>> file really is the original file or a virus... The easiest way is
>>> to go through the whole file byte for byte and and save the
>>> checksum...
>> That's exactly what I do! CRC-32 is only used to build a
>> secure checksum. If you want/need, I send you the C source
>> of the function. You can adapt what you need.
> 
> Great, I would like to have a peek into that source...

I send you the files. You need two part's:

First the program that write the checksum to the program.
Second the identical function in the program to compare (I
include the write NOT in the program, because the function
can find and used).
After compiling (I hope all subroutines are included), the
program must patch be himself, so I send a compiled version
also.

> 
>>> But this will take som time to do... So it's an option you can't
>>> use every hour... I'll will figure something out...
>> My BBS-Program is over 500.000 Bytes. The Checksum need only
>> one second (on a 68040). Only machines with 68000 will take
>> time over 3 seconds...
> 
> Great :) My BBS program is only 210.640 bytes long :)

Gateway-BBS is over ten years old, it is a multi-node system
(upto 99 nodes). My own BBS (now closed) was the biggest in
Berlin (and one of the biggest in germany) with 24 nodes on
ONE Amiga 2000 (68040 GVP). This day's are past, forever...

-- 

/\/\ | ( |-| /-\ (- |_ /-\

Michaela Prüß

eMail:
Gateway5@Gateway.To
GatewayBBS@bigfoot.de

http://WWW.AmigaTools.Net

NETWORD nw:Gateway5

AmiAIM: GatewayTel

Support, Info's and download for GatewayBBS systems
Amiga freeware download
Gateway(R)-I, II, III, IV und 5 (c)
Tools, Developer-AddOns and Lib's for vbcc



--1038p4TteRSuKXBIgGr8gRiNDIkkZAlLD3I

/*
** Henry Version Control
** By Rune Jacobsen
*/

#define VERSION 5
#define VERSTRING "5"
#define REVISION 12
#define REVSTRING "12"
#define BUILD 3
#define BUILDSTRING "3"
#define TIMESTRING "2:18:52"
#define DATESTRING "1.1.100"

/* EOF */


--1038p4TteRSuKXBIgGr8gRiNDIkkZAlLD3I

#include "projekt.h"
#include "main.h"

int main(int argc, char *argv[]) {

	int		ret;
	int		kik;
	long	*systemBasis;
	struct	ExecBase*	execBasePtr;

	if (argc==2 && argv[1][0]=='?') {
		PRINT_VERSION;
		exit(0);
	}

	systemBasis=(APTR)4;
	execBasePtr=(APTR)*systemBasis;

	if (2037!=(kik=KickVersion())) {
		if (selfcheck(argv[0])) {
			printf(&VERSTAG[6]);
			printf("\nProgramm defekt!\n");
			exit(20);
		}
	}
	printf("[41;32m Gateway-5 System-Identifikation und Security-System !! [0m\n");
	printf("[4;41;32m                                                        [0m\n");
	printf("[41;32m          ______ _   __ ______ ______ ______ _   _      [0m\n");
	printf("[41;32m         / ____/\\ \\_/ // ____//_  __// ____// \\_/ \\     [0m\n");
	printf("[41;32m        / /___   \\   // /___   / /  / /_   / \\__/ /     [0m\n");
	printf("[41;32m       /___  /    | //___  /  / /  / __/  / /  / /      [0m\n");
	printf("[41;32m      ____/ /    / /____/ /  / /  / /___ / /  / /       [0m\n");
	printf("[41;32m     /_____/    /_//_____/  /_/  /_____//_/  /_/        [0m\n");
	printf("[4;41;32m                                                        [0m\n");
	printf("[41;32m                                                        [0m\n");

	printf("[41;32m-->  CPU:");

	if (execBasePtr->AttnFlags & AFF_68060) {
		printf(" 68060 ");
	} else {
		if (execBasePtr->AttnFlags & AFF_68040) {
			printf(" 68040 ");
		} else {
			if (execBasePtr->AttnFlags & AFF_68030) {
				printf(" 68030 ");
			} else {
				if (execBasePtr->AttnFlags & AFF_68020) {
						printf(" 68020 ");
				} else {
					if (execBasePtr->AttnFlags & AFF_68010) {
						printf(" 68010 ");
					} else {
						printf(" 68000 ");
					}
				}
			}
		}
	}

	printf("/ Floating Point Unit: ");

	if (execBasePtr->AttnFlags & AFF_FPU40) {
		if (execBasePtr->AttnFlags & AFF_68060) {
			printf("FPU60 ");
		} else {
			printf("FPU40 ");
		}

		if (execBasePtr->AttnFlags & AFF_68882 || execBasePtr->AttnFlags & AFF_68881) {
			printf("& Mlib ");
		} else {
			printf("/ Std. ");
		}
	} else {
		if (execBasePtr->AttnFlags & AFF_68882) {
			printf("68882       ");
		} else {
			if (execBasePtr->AttnFlags & AFF_68881) {
				printf("68881      ");
			} else {
				printf("N/A        ");
			}
		}
	}
	printf(" <--[41;36m\n");


/* END CPU
   BEGIN EXECBASE */

	printf("[42;33m  1=%10lu  CPU / ID:= [42;31m",(ULONG)execBasePtr->SoftVer);

#ifdef VOLLVERSION
	if (kik) printf("  (%4d) ", kik);
	if (kik==2037) printf("Rechner MICHAELA    ");
	if (kik==4040) printf("Rechner AIRGATE     ");
	if (kik==4045) printf("Rechner VEREIN TSG  ");
	if (kik==1040) printf("Rechner NORMAN      ");
#endif
#ifdef SHARE
	printf(" VERSION = SHARE    ");
#endif
#ifdef DEMO
	printf(" VERSION = DEMO     ");
#endif
#ifdef FREEWARE
	printf(" VERSION = FREEWARE ");
#endif
	printf("\n[43;32m  2=%10lu  68010=%5lu[0m",         (ULONG)execBasePtr->LowMemChkSum,        (ULONG)(execBasePtr->AttnFlags & AFF_68010));
	printf("\n[43;32m  3=%10lu  68020=%5lu[0m",         (ULONG)execBasePtr->MaxLocMem,           (ULONG)(execBasePtr->AttnFlags & AFF_68020));
	printf("\n[43;32m  4=%10lu  68030=%5lu[0m",         (ULONG)execBasePtr->MaxExtMem,           (ULONG)(execBasePtr->AttnFlags & AFF_68030));
	printf("\n[43;32m  5=%10lu  68040=%5lu[0m",         (ULONG)execBasePtr->LibNode.lib_Version, (ULONG)(execBasePtr->AttnFlags & AFF_68040));
	printf("\n[43;32m  6=%10lu  68060=%5lu[0m",         (ULONG)execBasePtr->LibNode.lib_Revision,(ULONG)(execBasePtr->AttnFlags & AFF_68060));
	printf("\n[43;32m  7=%10lu  FPU40=%5lu[0m",         (ULONG)execBasePtr->LibNode.lib_NegSize, (ULONG)(execBasePtr->AttnFlags & AFF_FPU40));
	printf("\n[43;32m  8=%10lu  881/2=%2lu/%2lu[0m\n\n",(ULONG)execBasePtr->LibNode.lib_PosSize, (ULONG)(execBasePtr->AttnFlags & AFF_68881),(ULONG)(execBasePtr->AttnFlags & AFF_68882));

	printf(&VERSTAG[6]);
	if (KickVersion()==2037) {
		ret=selfcheck(argv[argc-1]);

		if (!ret) {
			printf("\n[32mChecksumme OK![0m\n");
			exit(0);
		}
		printf("\n[34mChecksumme falsch, wird angepasst: [0m");

		ret=selfmade(argv[argc-1]);
		if (ret==1) exit(0);

		if (ret) printf("ERROR: Patch schlug fehl!\n");
		else {
			printf("OK! Gegentest: ");

			ret=selfcheck(argv[argc-1]);

			if (ret) printf("ERROR: 2.Lauf nicht OK!\n");
			else printf("Checksumme OK!\n");
		}
	}
	printf("\n");
	exit(0);
}

--1038p4TteRSuKXBIgGr8gRiNDIkkZAlLD3I

#include "HVC.h"

char	VER[]="V"VERSTRING"."REVSTRING"."BUILDSTRING;
char	VERSTAG[]="$VER: SystemIdent "VERSTRING"."REVSTRING"."BUILDSTRING"-"CPU"+"FPU" ("DATESTRING"), written & ©opyright by Michaela Prüß";

#include "printversion.h"
#include "g5.h"

struct	g5data	g5;

--1038p4TteRSuKXBIgGr8gRiNDIkkZAlLD3I

#include "Version.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <signal.h>
#include <exec/exec.h>
#include <exec/execbase.h>
#include <exec/types.h>
#include <math.h>
#include <time.h>

#define SYSTEMIDENT

/* Protos */

#include "DOSLIB_protos.h"
#include "systemident_protos.h"

--1038p4TteRSuKXBIgGr8gRiNDIkkZAlLD3I

#include "include.h"
#include "DOSLIB_protos.h"
#include "ADOSLIB_protos.h"

#define OK 0
#define ERROR (-1)
#define NOSUM (1)
#define LINT_ARGS

typedef unsigned long int UNS_32_BITS;

static UNS_32_BITS crc_32_tab[] =				 /* CRC polynomial 0xedb88320 */
{
0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,
0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,
0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,
0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,
0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,
0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,
0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,
0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,
0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,
0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,
0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,
0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,
0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,
0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,
0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,
0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,
0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,
0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,
0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,
0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,
0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,
0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,
0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,
0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,
0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,
0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,
0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,
0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,
0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,
0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d
};

#define UPDC32(octet, crc) (crc_32_tab[((crc) ^ (octet)) & 0xff] ^ ((crc) >> 8))

int selfcheck(char *name)
{
	char	*checksumstring[] = { "p§@\033##########" };
	char	testname[256];

	register	FILE		*fin;
	register	unsigned	long	oldcrc32;
	register	unsigned	long	crc32;
	register	unsigned	long	oldcrc;
	register	c;
	register	long		charcnt;

	register	chk=0;
	char		test[12];
	char		test2[12];

	strcpy(testname,name);
	fin=fopen(testname, "r");

	if (!fin)
	{
		GetProgramPath(testname);		/* ADOSLIB.lib */
		charcnt=strlen(testname);
		if (charcnt && testname[charcnt-1]!=':' && testname[charcnt-1]!='/')
		{
			testname[charcnt++]='/';
			testname[charcnt]='\0';
		}
	    strcat(testname,name);

		fin=fopen(testname, "r");
		if (!fin) return ERROR;
	}

	oldcrc32 = 0xFFFFFFFF; charcnt = 0;

	for(;;)
	{
		c=getc(fin);
		if (feof(fin)) break;
		++charcnt;

		if (chk<4) oldcrc32 = UPDC32(c, oldcrc32);
		else
		{
			test[chk-4]=c;
			test[chk-3]=0;
			chk++;
			if (chk==14) chk=0;
		}
		if (chk==3)
		{
			if (c==27) chk++;
			else chk=0;
		}

		if (chk==2)
		{
			if (c==64) chk++;
			else chk=0;
		}

		if (chk==1)
		{
			if (c==167) chk++;
			else chk=0;
		}

		if (!chk && c==112) chk++;
	}

	if (ferror(fin)) charcnt = -1;

	fclose(fin);

	crc32 = oldcrc32;
	oldcrc = oldcrc32 = ~oldcrc32;

	sprintf(test2,"%10lu",oldcrc + charcnt );

	if (!strcmp(test,test2)) return OK;

	return OK;
}

int selfmade(char *name)
{
	register	FILE		*fin;
	register	unsigned	long	oldcrc32;
	register	unsigned	long	crc32;
	register	unsigned	long	oldcrc;
	register	c;
	register	long		charcnt;

	register	chk=0;
	register	merker=-1;
	char		test[12];
	char		test2[12];

	oldcrc32 = 0xFFFFFFFF; charcnt = 0;

	printf("Check-Sum REKALK start!\n");

	fin=fopen(name, "r");
	if (!fin)
	{
		printf("Fehler OPEN '%s'\n",name);
		return ERROR;
	}

	for(;;)
	{
		c=getc(fin);
		if (feof(fin)) break;
		++charcnt;

		if (chk<4) oldcrc32 = UPDC32(c, oldcrc32);
		else
		{
			test[chk-4]=c;
			test[chk-3]=0;
			chk++;
			if (chk==14)
			{
				chk=0;
				merker=charcnt-10;
			}
		}
		if (chk==3)
		{
			if (c==27) chk++;
			else chk=0;
		}

		if (chk==2)
		{
			if (c==64) chk++;
			else chk=0;
		}

		if (chk==1)
		{
			if (c==167) chk++;
			else chk=0;
		}

		if (!chk && c==112) chk++;
	}

	if (ferror(fin)) charcnt = -1;

	fclose(fin);

	crc32 = oldcrc32;
	oldcrc = oldcrc32 = ~oldcrc32;

/*** DEBUG ***
	printf("CRC: %08lX, Länge: %7ld, File: %s\n", oldcrc, charcnt, name);
***/

	sprintf(test2,"%10lu",oldcrc + charcnt);

	if (merker>0)
	{
		printf("Neue Checksumme %s, Pos=%d\n",test2,merker);
		fin=fopen(name, "r+");
		if (!fin) return ERROR;
		fseek(fin,merker,SEEK_SET);
		fprintf(fin,"%s",test2);
		fclose(fin);
	}
	else
	{
		printf("Programm hat keine Check-Summe!\n");
		return NOSUM;
	}

	return OK;
}

--1038p4TteRSuKXBIgGr8gRiNDIkkZAlLD3I

[Attachment: Work:Thor/Data/decoded/SystemIdent]


--1038p4TteRSuKXBIgGr8gRiNDIkkZAlLD3I

/* include.h */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include <signal.h>
#include <libraries/dos.h>
#include <libraries/dosextens.h>
#include <libraries/diskfont.h>
#include <libraries/intuisup.h>
#include <intuition/intuition.h>
#include <dos/dos.h>
#include <dos/dosextens.h>
#include <dos/datetime.h>
#include <exec/types.h>
#include <exec/io.h>
#include <exec/exec.h>
#include <exec/execbase.h>
#include <exec/ports.h>
#include <exec/tasks.h>
#include <exec/memory.h>
#include <devices/console.h>
#include <devices/conunit.h>
#include <devices/serial.h>
#include <devices/narrator.h>
#include <devices/timer.h>
#include <graphics/text.h>
#include <clib/alib_protos.h>
#include <clib/asl_protos.h>
#include <clib/battclock_protos.h>
#include <clib/battmem_protos.h>
#include <clib/cia_protos.h>
#include <clib/commodities_protos.h>
#include <clib/console_protos.h>
#include <clib/diskfont_protos.h>
#include <clib/dos_protos.h>
#include <clib/exec_protos.h>
#include <clib/expansion_protos.h>
#include <clib/gadtools_protos.h>
#include <clib/graphics_protos.h>
#include <clib/icon_protos.h>
#include <clib/iffparse_protos.h>
#include <clib/input_protos.h>
#include <clib/intuition_protos.h>
#include <clib/keymap_protos.h>
#include <clib/layers_protos.h>
#include <clib/macros.h>
#include <clib/mathffp_protos.h>
#include <clib/mathieeedoubbas_protos.h>
#include <clib/mathieeedoubtrans_protos.h>
#include <clib/mathieeesingbas_protos.h>
#include <clib/mathieeesingtrans_protos.h>
#include <clib/mathtrans_protos.h>
#include <clib/misc_protos.h>
#include <clib/potgo_protos.h>
#include <clib/ramdrive_protos.h>
#include <clib/timer_protos.h>
#include <clib/translator_protos.h>
#include <clib/utility_protos.h>
#include <clib/wb_protos.h>

/* Versionstyp: DEMO / SHARE / VOLLVERSION / FREEWARE */

#include "version.h"

--1038p4TteRSuKXBIgGr8gRiNDIkkZAlLD3I

/* VERSIONSANZEIGE G5 / VBCC-Module */

#define PRINT_VERSION {\
	printf("\nVersionsinformation\t\t(Hilfe mit -?)\n\nGateway(R)-5 BBS & Software (c) 1991-2000 by Michaela Prüß\n\n");\
	printf(" Version$: %s\n",&VERSTAG[6]); \
	printf("Bedeutung: Version %d, Revision %d und Build %d\n",VERSION,REVISION,BUILD); \
	printf(" Erstellt: %s um %s Uhr\n",DATESTRING,TIMESTRING); \
	printf("Vers.info: Compiled für CPU=%s, FPU=%s! Version (kurz): %s\n",CPU,FPU,VER); \
	printf(" Compiler: vbcc 0.7 by Volker Barthelmann\n"); \
	printf("Assembler: PhxAss 4.37ß (pasm 1.2b) by Frank Wille\n"); \
	printf("   Linker: vlink 0.6d by Frank Wille\n"); \
	printf("   Editor: vim 5.3 (Vi IMproved) by Bram Moolenaar\n"); \
	printf("    Tools: PMM 1.3 (beta) Projekt-Make-Manager\n"); \
	printf("           HVC 0.6 (Version/Revision-Dumper) by Rune Jacobsen (bugfixed by me)\n"); \
	printf(" Hardware: Amiga 1200T / 72 MB Fast-Ram / 2 MB Chip (AGA)\n"); \
	printf("           Blizzard 68040/25 Mhz & PPC603p/240 Mhz/Phase5\n"); \
	printf("           SCSI-II-GVP-Board, Toshiba CD-Rom XM-6201TA\n"); \
	printf("           IBM DDRS-34560 4,2 GB, Seagate ST51080N 1030 MB\n"); \
	printf("           Quantum LPS52S 50 MB, Seagate 80 MB\n"); \
	printf("           Quantum Fireball 13 GB IDE\n"); \
	printf(" Amiga-OS: Kick 40.68, WB 44.2, WarpOS V 15.0\n"); \
}

--1038p4TteRSuKXBIgGr8gRiNDIkkZAlLD3I

int	main (int argc, char *argv[]);		/* main.c	*/

--1038p4TteRSuKXBIgGr8gRiNDIkkZAlLD3I--

